// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package clusterleader.actions;

import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeoutException;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import clusterleader.proxies.ApplicationSettings;

public class AquireAdministrativeLock extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.Long TimeoutMS;

	public AquireAdministrativeLock(IContext context, java.lang.Long TimeoutMS)
	{
		super(context);
		this.TimeoutMS = TimeoutMS;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		IContext context = Core.createSystemContext();

		boolean locked = false;
		IMendixObject settings;
		long time = System.currentTimeMillis();
		
		do {
			List<IMendixObject> result = Core.retrieveXPathQuery(context, "//" + ApplicationSettings.entityName);
			if( result.size() > 0 ) {
				settings = result.get(0);
				locked = settings.getValue(context, ApplicationSettings.MemberNames.Locked.toString());
			}
			else 
				throw new CoreException("No settings found!");
		
			if( locked ) {
				if( (System.currentTimeMillis() - time) > this.TimeoutMS) {
					_logNode.trace("Settings are locked, wait time has exceded, waiting for: " + (System.currentTimeMillis() - time) + " time-out was: " + this.TimeoutMS);
					throw new TimeoutException("Lock wait time has exceded");
				}
				
				_logNode.trace("Settings are locked, trying again in 200ms, timeout" + this.TimeoutMS);
				Thread.sleep(200);
			}
		} while( locked == true );

		try {
		
			context.startTransaction();

			settings.setValue(context, ApplicationSettings.MemberNames.Locked.toString(), true);
			settings.setValue(context, ApplicationSettings.MemberNames.LockedBy.toString(), Core.getXASId());
			settings.setValue(context, ApplicationSettings.MemberNames.LockedOn.toString(), new Date());
			Core.commit(context, settings);
			context.endTransaction();
			
			return true;
		}
		catch( Exception e ) {
			context.rollbackTransAction();
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "AquireAdministrativeLock";
	}

	// BEGIN EXTRA CODE
	private static ILogNode _logNode = Core.getLogger("ScheduleManager");
	// END EXTRA CODE
}
